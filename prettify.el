;; (add-hook 'lisp-mode-hook
;;           (lambda ()
;;             (mapc (lambda (pair) (push pair prettify-symbols-alist))
;;                   '(;; Syntax
;;                     ("defun" .      #x2131)
;;                     ("not" .      #x2757)
;;                     ("in" .       #x2208)
;;                     ("not in" .   #x2209)
;;                     ("yield" .    #x27fb)
;;                     ("for" .      #x2200)
;;                     ("let" .      #x2200)
;;                     ;; Base Types
;;                     ("int" .      #x2124)
;;                     ("float" .    #x211d)
;;                     ("string" .  #x1d54a)
;;                     ("t" .     #x1d54b)
;;                     ("nil" .    #x1d53d)
;;                     ;; l-math
;;                     ("Dict" .     #x1d507)
;;                     ("factorial" #x21)
;;                     ("List" .     #x2112)
;;                     ("Tuple" .    #x2a02)
;;                     ("Set" .      #x2126)
;;                     ("Iterable" . #x1d50a)
;;                     ("Any" .      #x2754)
;;                     ("Union" .    #x22c3)))))
(mapcar (lambda (x)
          (add-hook x
                    (lambda ()
                      (mapc (lambda (pair) (push pair prettify-symbols-alist))
                            '(;; Syntax
                              ("defun" .      #x0192 )
                              ("DEFUN" .      #x2131)
                              ("Defun" .      #x2131)
                              ("not" .      #x2757)
                              ("NOT" .      #x2757)
                              ;; ("let" .      #x2757)
                              ("in" .       #x2208)
                              ("IN" .       #x2208)
                              ("not-in" .   #x2209)
                              ("NOT-IN" .   #x2209)
                              ("return" .   #x27fc)
                              ("RETURN" .   #x27fc)
                              ("yield" .    #x27fb)
                              ("YIELD" .    #x27fb)
                              ("Let" .      #x2200)
                              ("lET" .      #x2200)
                              ("let" .      #x2200)
                              ("LET" .      #x2200)
                              ("for-all" .      #x2200)
                              ("FOR-ALL" .      #x2200)
                              ;; Base Types
                              ("t" .     #x1d54b)
                              ("T" .     #x1d54b)
                              ("nil" .    #x2205)
                              ("NIL" .    #x2205)
                              ("Int" .      #x2124)
                              ("int" .      #x2124)
                              ("INT" .      #x2124)
                              ("float" .    #x211d)
                              ("FLOAT" .    #x211d)
                              ("string" .  #x1d54a)
                              ("STRING" .  #x1d54a)
                              ("and" .     #x2227)
                              ("AND" .     #x2227)
                              ("or" .     #x2228)
                              ("OR" .     #x2228)
                              ;; l-math
                              ("Sum" .     #x2211)
                              ("sum" .     #x2211)
                              ("SUM" .     #x2211)
                              ("Factorial" .     #x21)
                              ("factorial" .     #x21)
                              ("FACTORIAL" .     #x21)
                              ("List" .     #x2112)
                              ("list" .     #x2112)
                              ("LIST" .     #x2112)
                              ("Set" .      #x2126)
                              ("set" .      #x2126)
                              ("SET" .      #x2126)
                              ;; ("" .     #x)
                              ;; logic
                              ("such-that" .     #x3f6)
                              ("SUCH-THAT" .     #x3f6)
                              ("such-that" .     #x3f6)
                              ("Therefore" .     #x2234)
                              ("therefore" .     #x2234)
                              ("THEREFORE" .     #x2234)
                              ("Before" .     #x2235)
                              ("before" .     #x2235)
                              ("BEFORE" .     #x2235)
                              ("Union" .    #x22c3)
                              ("union" .     #x22c3)
                              ("UNION" .     #x22c3)
                              ("assert" .     #x22a2)
                              ("ASSERT" .     #x22a2)
                              ;; ("" .     #x)
                              ;; calc
                              ("integral" .     #x222b)
                              ("INTEGRAL" .     #x222b)
                              ("|A|" . ?ùî∏)
                              ("|B|" . ?ùîπ)
                              ("|C|" . ?‚ÑÇ)
                              ("|D|" . ?ùîª)
                              ("|E|" . ?ùîº)
                              ("|F|" . ?ùîΩ)
                              ("|G|" . ?ùîæ)
                              ("|H|" . ?‚Ñç)
                              ("|I|" . ?ùïÄ)
                              ("|J|" . ?ùïÅ)
                              ("|K|" . ?ùïÇ)
                              ("|L|" . ?ùïÉ)
                              ("|M|" . ?ùïÑ)
                              ("|N|" . ?‚Ñï)
                              ("|O|" . ?ùïÜ)
                              ("|P|" . ?‚Ñô)
                              ("|Q|" . ?‚Ñö)
                              ("|R|" . ?‚Ñù)
                              ("|S|" . ?ùïä)
                              ("|T|" . ?ùïã)
                              ("|U|" . ?ùïå)
                              ("|V|" . ?ùïç)
                              ("|W|" . ?ùïé)
                              ("|X|" . ?ùïè)
                              ("|Y|" . ?ùïê)
                              ("|Z|" . ?‚Ñ§)
                              ("|gamma|" . ?‚ÑΩ)
                              ("|Gamma|" . ?‚Ñæ)
                              ("|pi|" . ?‚Ñº)
                              ("|Pi|" . ?‚Ñø)

                              ;; Types
                              ("::" . ?‚à∑)

                              ;; Quantifiers
                              ("forall" . ?‚àÄ)
                              ("exists" . ?‚àÉ)

                              ;; Arrows
                              ("->" . ?‚Üí)
                              ("-->" . ?‚ü∂)
                              ("<-" . ?‚Üê)
                              ("<--" . ?‚üµ)
                              ("<->" . ?‚Üî)
                              ("<-->" . ?‚ü∑)

                              ("=>" . ?‚áí)
                              ("==>" . ?‚üπ)
                              ("<==" . ?‚ü∏)
                              ("<=>" . ?‚áî)
                              ("<==>" . ?‚ü∫)

                              ("|->" . ?‚Ü¶)
                              ("|-->" . ?‚üº)
                              ("<-|" . ?‚Ü§)
                              ("<--|" . ?‚üª)

                              ("|=>" . ?‚§á)
                              ("|==>" . ?‚üæ)
                              ("<=|" . ?‚§Ü)
                              ("<==|" . ?‚üΩ)

                              ("~>" . ?‚áù)
                              ("<~" . ?‚áú)

                              (">->" . ?‚Ü£)
                              ("<-<" . ?‚Ü¢)
                              ("->>" . ?‚Ü†)
                              ("<<-" . ?‚Üû)

                              (">->>" . ?‚§ñ)
                              ("<<-<" . ?‚¨ª)

                              ("<|-" . ?‚áΩ)
                              ("-|>" . ?‚áæ)
                              ("<|-|>" . ?‚áø)

                              ("<-/-" . ?‚Üö)
                              ("-/->" . ?‚Üõ)

                              ("<-|-" . ?‚á∑)
                              ("-|->" . ?‚á∏)
                              ("<-|->" . ?‚áπ)

                              ("<-||-" . ?‚á∫)
                              ("-||->" . ?‚áª)
                              ("<-||->" . ?‚áº)

                              ("-o->" . ?‚á¥)
                              ("<-o-" . ?‚¨∞)

                              ;; Boolean operators
                              ("not" . ?¬¨)
                              ("&&" . ?‚àß)
                              ("||" . ?‚à®)

                              ;; Relational operators
                              ("==" . ?‚â°)
                              ("/=" . ?‚â†)
                              ("<=" . ?‚â§)
                              (">=" . ?‚â•)
                              ("/<" . ?‚âÆ)
                              ("/>" . ?‚âØ)

                              ;; Containers / Collections
                              ("++" . ?‚ß∫)
                              ("+++" . ?‚ßª)
                              ("|||" . ?‚´¥)
                              ("empty" . ?‚àÖ)
                              ("elem" . ?‚àà)
                              ("notElem" . ?‚àâ)
                              ("member" . ?‚àà)
                              ("notMember" . ?‚àâ)
                              ("union" . ?‚à™)
                              ("intersection" . ?‚à©)
                              ("isSubsetOf" . ?‚äÜ)
                              ("isProperSubsetOf" . ?‚äÇ)

                              ;; Other
                              ("<<" . ?‚â™)
                              (">>" . ?‚â´)
                              ("<<<" . ?‚ãò)
                              (">>>" . ?‚ãô)
                              ("<|" . ?‚ä≤)
                              ("|>" . ?‚ä≥)
                              ("><" . ?‚ãà)
                              ("mempty" . ?‚àÖ)
                              ("mappend" . ?‚äï)
                              ("<*>" . ?‚äõ)
                              ("undefined" . ?‚ä•)
                              (":=" . ?‚âî)
                              ("=:" . ?‚âï)
                              ("=def" . ?‚âù)
                              ("=?" . ?‚âü)
                              ("..." . ?‚Ä¶)
                              ;; ("" .     #x)
                              )))))
        '(lisp-mode-hook haskell-mode-hook lisp-mode-hook slime-mode-hook common-lisp-mode-hook))
(add-hook 'python-mode-hook
          (lambda ()
            (mapc (lambda (pair) (push pair prettify-symbols-alist))
                  '(;; Syntax
                    ("def" .      #x2131)
                    ("not" .      #x2757)
                    ("in" .       #x2208)
                    ("not in" .   #x2209)
                    ("return" .   #x27fc)
                    ("yield" .    #x27fb)
                    ("for" .      #x2200)
                    ;; Base Types
                    ("int" .      #x2124)
                    ("float" .    #x211d)
                    ("str" .      #x1d54a)
                    ("True" .     #x1d54b)
                    ("False" .    #x1d53d)
                    ;; Mypy
                    ("Dict" .     #x1d507)
                    ("List" .     #x2112)
                    ("Tuple" .    #x2a02)
                    ("Set" .      #x2126)
                    ("Iterable" . #x1d50a)
                    ("Any" .      #x2754)
                    ("Union" .    #x22c3)))))
;; (add-hook 'haskell-mode-hook
;;           (lambda ()
;;             (mapc (lambda (pair) (push pair prettify-symbols-alist))
;;                   '(;; Syntax
